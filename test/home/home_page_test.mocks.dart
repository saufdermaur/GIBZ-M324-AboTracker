// Mocks generated by Mockito 5.4.5 from annotations
// in abo_tracker/test/home/home_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:abo_tracker/group/group_class.dart' as _i2;
import 'package:abo_tracker/group/group_service.dart' as _i3;
import 'package:abo_tracker/user/user_class.dart' as _i6;
import 'package:abo_tracker/user/user_service.dart' as _i5;
import 'package:abo_tracker/user_group/user_group_class.dart' as _i8;
import 'package:abo_tracker/user_group/user_group_service.dart' as _i7;
import 'package:flutter/src/widgets/navigator.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGroupClass_0 extends _i1.SmartFake implements _i2.GroupClass {
  _FakeGroupClass_0(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

/// A class which mocks [GroupService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGroupService extends _i1.Mock implements _i3.GroupService {
  MockGroupService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<List<_i2.GroupClass>> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<List<_i2.GroupClass>>.empty(),
      ) as _i4.Stream<List<_i2.GroupClass>>);

  @override
  _i4.Future<_i2.GroupClass> createGroup(_i2.GroupClass? newGroup) => (super.noSuchMethod(
        Invocation.method(#createGroup, [newGroup]),
        returnValue: _i4.Future<_i2.GroupClass>.value(
          _FakeGroupClass_0(
            this,
            Invocation.method(#createGroup, [newGroup]),
          ),
        ),
      ) as _i4.Future<_i2.GroupClass>);

  @override
  _i4.Future<void> updateGroup(
    _i2.GroupClass? oldGroup,
    String? name,
    int? totalCost,
    int? availableUnits,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#updateGroup, [
          oldGroup,
          name,
          totalCost,
          availableUnits,
        ]),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteGroup(_i2.GroupClass? group) => (super.noSuchMethod(
        Invocation.method(#deleteGroup, [group]),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [UserService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserService extends _i1.Mock implements _i5.UserService {
  MockUserService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<List<_i6.UserClass>> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<List<_i6.UserClass>>.empty(),
      ) as _i4.Stream<List<_i6.UserClass>>);

  @override
  _i4.Future<List<_i6.UserClass>> getUsers() => (super.noSuchMethod(
        Invocation.method(#getUsers, []),
        returnValue: _i4.Future<List<_i6.UserClass>>.value(
          <_i6.UserClass>[],
        ),
      ) as _i4.Future<List<_i6.UserClass>>);
}

/// A class which mocks [UserGroupService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserGroupService extends _i1.Mock implements _i7.UserGroupService {
  MockUserGroupService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> createUserGroup(
    String? groupId,
    List<_i6.UserClass>? users,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#createUserGroup, [groupId, users]),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i8.UserGroupClass>> getUserGroups() => (super.noSuchMethod(
        Invocation.method(#getUserGroups, []),
        returnValue: _i4.Future<List<_i8.UserGroupClass>>.value(
          <_i8.UserGroupClass>[],
        ),
      ) as _i4.Future<List<_i8.UserGroupClass>>);

  @override
  _i4.Future<List<_i8.UserGroupClass>> getUserGroupGroupId(String? groupId) => (super.noSuchMethod(
        Invocation.method(#getUserGroupGroupId, [groupId]),
        returnValue: _i4.Future<List<_i8.UserGroupClass>>.value(
          <_i8.UserGroupClass>[],
        ),
      ) as _i4.Future<List<_i8.UserGroupClass>>);

  @override
  _i4.Future<void> updateUserGroup(
    _i8.UserGroupClass? oldUserGroup,
    String? userId,
    String? groupId,
    int? cost,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#updateUserGroup, [
          oldUserGroup,
          userId,
          groupId,
          cost,
        ]),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateMultipleUserGroup(
    List<_i8.UserGroupClass>? oldUserGroups,
    int? cost,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#updateMultipleUserGroup, [oldUserGroups, cost]),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteUserGroup(_i8.UserGroupClass? userGroup) => (super.noSuchMethod(
        Invocation.method(#deleteUserGroup, [userGroup]),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [NavigatorObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorObserver extends _i1.Mock implements _i9.NavigatorObserver {
  MockNavigatorObserver() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void didPush(_i9.Route<dynamic>? route, _i9.Route<dynamic>? previousRoute) => super.noSuchMethod(
        Invocation.method(#didPush, [route, previousRoute]),
        returnValueForMissingStub: null,
      );

  @override
  void didPop(_i9.Route<dynamic>? route, _i9.Route<dynamic>? previousRoute) => super.noSuchMethod(
        Invocation.method(#didPop, [route, previousRoute]),
        returnValueForMissingStub: null,
      );

  @override
  void didRemove(
    _i9.Route<dynamic>? route,
    _i9.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(#didRemove, [route, previousRoute]),
        returnValueForMissingStub: null,
      );

  @override
  void didReplace({
    _i9.Route<dynamic>? newRoute,
    _i9.Route<dynamic>? oldRoute,
  }) =>
      super.noSuchMethod(
        Invocation.method(#didReplace, [], {
          #newRoute: newRoute,
          #oldRoute: oldRoute,
        }),
        returnValueForMissingStub: null,
      );

  @override
  void didChangeTop(
    _i9.Route<dynamic>? topRoute,
    _i9.Route<dynamic>? previousTopRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(#didChangeTop, [topRoute, previousTopRoute]),
        returnValueForMissingStub: null,
      );

  @override
  void didStartUserGesture(
    _i9.Route<dynamic>? route,
    _i9.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(#didStartUserGesture, [route, previousRoute]),
        returnValueForMissingStub: null,
      );

  @override
  void didStopUserGesture() => super.noSuchMethod(
        Invocation.method(#didStopUserGesture, []),
        returnValueForMissingStub: null,
      );
}
